name: Grammar Check
on:
  repository_dispatch:
    types: [grammar-check]
  workflow_dispatch:
    inputs:
      text:
        description: "Paste any text to check"
        required: false
        type: string

permissions:
  contents: read
  issues: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq lynx

      - name: Extract payload and build doc.txt
        id: build
        run: |
          URL=$(jq -r '.client_payload.url // empty' "$GITHUB_EVENT_PATH")
          TEXT=$(jq -r '.client_payload.text // empty' "$GITHUB_EVENT_PATH")
          CID=$(jq -r '.client_payload.client_id // empty' "$GITHUB_EVENT_PATH")
          echo "CLIENT_ID=$CID" >> $GITHUB_ENV
          echo "SRC_URL=$URL"   >> $GITHUB_ENV

          if [ -n "$URL" ]; then
            echo "Fetching $URL"
            curl -fsSL "$URL" -o page.html
            # Convert HTML to plain text (simple + robust)
            lynx -dump -nolist page.html > doc.txt
          else
            if [ -z "$TEXT" ]; then TEXT="${{ github.event.inputs.text }}"; fi
            printf "%s" "$TEXT" > doc.txt
          fi

          if [ ! -s doc.txt ]; then
            echo "::error::No content to analyze (neither url nor text)"; exit 1
          fi
          echo "BYTE_SIZE=$(wc -c < doc.txt)" >> $GITHUB_ENV
          echo "Built doc.txt"

      - name: Run LanguageTool
        run: |
          curl -sS -X POST https://api.languagetool.org/v2/check \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d 'language=en-US' \
            --data-urlencode text@doc.txt > report.json
          echo "COUNT=$(jq '.matches | length' report.json)" >> $GITHUB_ENV

      - name: Build Markdown report
        run: |
          {
            echo "# Grammar Report"
            if [ -n "${SRC_URL}" ]; then echo "**URL:** ${SRC_URL}  "; fi
            if [ -n "${CLIENT_ID}" ]; then echo "**Client ID:** ${CLIENT_ID}  "; fi
            echo "**Bytes scanned:** ${BYTE_SIZE}  "
            echo "**Issues found:** ${COUNT}"
            echo
            echo "## Top findings"
            jq -r '
              .matches[0:50][] |
              "- **\(.rule.issueType // .rule.category.id // .rule.id)**: \(.message)
                 - Context: \"\(.context.text)\"
                 - Suggestion: \((.replacements[0].value // "—"))"
            ' report.json
          } > report.md
          echo "Report written to report.md"

      - name: Create issue with report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const url = process.env.SRC_URL || '(manual input)';
            const title = `Grammar report – ${url} – ${new Date().toISOString().slice(0,19)}Z`;
            const body  = fs.readFileSync('report.md','utf8');
            const labels = ['grammar-report'];
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title, body, labels
            });
            core.info(`Created issue #${issue.number}`);

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: grammar-report
          path: |
            doc.txt
            report.json
            report.md
