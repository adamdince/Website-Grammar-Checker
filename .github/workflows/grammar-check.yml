name: Grammar Check
on:
  repository_dispatch:
    types: [grammar-check]   # supports Apps Script dispatches
  workflow_dispatch:          # lets you run from the Actions UI too
    inputs:
      text:
        description: "Paste any text to check"
        required: false
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract text -> doc.txt
        run: |
          # Prefer text from repository_dispatch payload; else use UI input
          TEXT=$(jq -r '.client_payload.text // empty' "$GITHUB_EVENT_PATH")
          if [ -z "$TEXT" ]; then TEXT="${{ github.event.inputs.text }}"; fi
          printf "%s" "$TEXT" > doc.txt
          if [ ! -s doc.txt ]; then
            echo "No text provided via payload or UI input"; exit 1
          fi
          echo "Bytes: $(wc -c < doc.txt)"

      - name: Grammar check via LanguageTool (public API)
        run: |
          RESP=$(curl -sS -X POST https://api.languagetool.org/v2/check \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d 'language=en-US' \
            --data-urlencode text@doc.txt)

          echo "$RESP" | jq '.matches | length as $n | "Found \($n) issues"'
          echo
          echo "Top issues:"
          echo "$RESP" | jq -r '.matches[] |
            (.rule.issueType + ": " + .message + " | context: \"" + .context.text + "\"")' \
            | head -n 25

          # Optional: fail only if lots of issues
          COUNT=$(echo "$RESP" | jq '.matches | length')
          if [ "$COUNT" -gt 100 ]; then
            echo "::error::Too many issues ($COUNT)"; exit 1
          fi
